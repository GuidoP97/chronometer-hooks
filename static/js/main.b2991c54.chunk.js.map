{"version":3,"sources":["components/ChronometerHook.jsx","App.jsx","index.js"],"names":["Button","styled","button","disabled","List","ul","Chronometer","useState","hours","minutes","seconds","miliseconds","clock","setClock","running","setRunning","allTimestamps","setAllTimestamps","started","setStarted","useEffect","interval","setInterval","tick","clearInterval","updateTimer","addZero","value","onClick","timestamp","map","idx","id","GlobalStyle","createGlobalStyle","App","Component","ReactDOM","render","document","getElementById"],"mappings":"ojBAMA,IAAMA,EAASC,IAAOC,OAAV,KACY,qBAAGC,SAA0B,cAAgB,aACvD,qBAAGA,SAA0B,oBAAsB,UAKpD,qBAAGA,SAA0B,OAAS,UAG7CC,EAAOH,IAAOI,GAAV,KA8HKC,EAzHK,WAAO,IAAD,EAEIC,mBAAS,CAC/BC,MAAO,EACPC,QAAS,EACTC,QAAS,EACTC,YAAa,IANK,mBAEfC,EAFe,KAERC,EAFQ,OASQN,oBAAS,GATjB,mBASfO,EATe,KASNC,EATM,OAUoBR,mBAAU,IAV9B,mBAUfS,EAVe,KAUAC,EAVA,OAWQV,oBAAS,GAXjB,mBAWfW,EAXe,KAWNC,EAXM,KAatBC,qBAAU,WACN,GAAGN,EAAQ,CACP,IAAMO,EAAWC,aAAY,WACzBC,MACD,KACH,OAAO,kBAAMC,cAAcH,OAEhC,CAACP,EAASF,IAGb,IAQMW,EAAO,WAAO,IACXf,EAAwCI,EAAxCJ,MAAOC,EAAiCG,EAAjCH,QAASC,EAAwBE,EAAxBF,QAASC,EAAeC,EAAfD,YAIV,MAFpBA,GAA4B,KAGxBA,EAAc,EACdD,GAAoB,GAGR,KAAZA,IACAA,EAAU,EACVD,GAAoB,GAGR,KAAZA,IACAA,EAAU,EACVD,GAAgB,GAGpBiB,EAAYjB,EAAOC,EAASC,EAASC,IA+BnCc,EAAc,SAACjB,EAAOC,EAASC,EAASC,GAC1CE,EAAS,CAAEL,QAAOC,UAASC,UAASC,iBAGlCe,EAAU,SAACC,GAAD,OAAYA,EAAQ,GAAR,WAAiBA,GAAUA,GAGjDnB,EAAyCI,EAAzCJ,MAAOC,EAAkCG,EAAlCH,QAASC,EAAyBE,EAAzBF,QAASC,EAAgBC,EAAhBD,YAM/B,OALAH,EAAQkB,EAAQlB,GAChBC,EAAUiB,EAAQjB,GAClBC,EAAUgB,EAAQhB,GAClBC,EAAce,EAAQf,GAGlB,qCACI,uCAAQH,EAAR,cAAmBC,EAAnB,cAAgCC,EAAhC,cAA6CC,KAC7C,cAACX,EAAD,CAAQG,SAAUW,EAASc,QA3EV,WAChBd,IACDC,GAAW,GACXI,GAAW,KAwEX,qBACA,cAACnB,EAAD,CAAQG,UAAWW,EAASc,QA5CZ,WAChBd,GACAC,GAAW,IA0CX,oBACA,cAACf,EAAD,CAAQG,UAAWW,EAASc,QAtCZ,WACpB,IAAMC,EAAY,CACdrB,MAAOI,EAAMJ,MACbC,QAASG,EAAMH,QACfC,QAASE,EAAMF,QACfC,YAAaC,EAAMD,aAGvBM,EAAiB,GAAD,mBAAKD,GAAL,CAAoBa,MA8BhC,yBACCX,GAAW,cAAClB,EAAD,CAAQG,SAAUW,EAASc,QA1B3B,WAChBH,EAAY,EAAG,EAAG,EAAG,GACrBR,EAAiB,IACjBE,GAAW,IAuBK,qBAEZ,cAACf,EAAD,UACKY,EAAcc,KAAI,SAACD,EAAWE,GAAZ,OACf,qEAEUA,EAAM,EAFhB,2CAGUL,EAAQG,EAAUrB,OAH5B,2CAIUkB,EAAQG,EAAUpB,SAJ5B,2CAKUiB,EAAQG,EAAUnB,SAL5B,2CAMUgB,EAAQG,EAAUlB,aAN5B,+BAASqB,+B,6KCxH7B,IAAMC,EAAcC,YAAH,KAsBFC,E,uKAXP,OACI,qCACI,cAACF,EAAD,IACA,6CACA,cAAC,EAAD,W,GAPEG,aCTlBC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.b2991c54.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\n\r\nimport { generate as id } from 'shortid'\r\n\r\nimport styled from 'styled-components'\r\n\r\nconst Button = styled.button`\r\n    background-color: ${({ disabled }) => disabled ? 'transparent' : '#387EF5'};\r\n    border: ${({ disabled }) => disabled ? '1px solid #387EF5' : 'none'};\r\n    outline:none;\r\n    border-radius:15px;\r\n    padding:.5rem;\r\n    margin: .5rem;\r\n    color: ${({ disabled }) => disabled ? '#444' : '#fff'};\r\n`\r\n\r\nconst List = styled.ul`\r\n    list-style:none;\r\n    padding-left:0;\r\n`\r\n\r\nconst Chronometer = () => {\r\n\r\n    const [clock, setClock] = useState({\r\n        hours: 0,\r\n        minutes: 0,\r\n        seconds: 0,\r\n        miliseconds: 0\r\n    })\r\n\r\n    const [running, setRunning] = useState(false)\r\n    const [allTimestamps, setAllTimestamps] = useState ([])\r\n    const [started, setStarted] = useState(false)\r\n\r\n    useEffect(() => {\r\n        if(running){\r\n            const interval = setInterval(()=>{\r\n                tick()\r\n            }, 100)            \r\n            return () => clearInterval(interval)\r\n        }\r\n    }, [running, clock]);\r\n\r\n    //Función que se llama con el boton start\r\n    const handleStartClick = () => {\r\n        if (!running) {\r\n            setRunning(true)\r\n            setStarted(true)\r\n        }\r\n    }\r\n\r\n    //Conteo del cronómetro\r\n    const tick = () => {\r\n        let {hours, minutes, seconds, miliseconds} = clock\r\n\r\n        miliseconds = miliseconds + 1\r\n\r\n        if (miliseconds === 10) {\r\n            miliseconds = 0\r\n            seconds = seconds + 1\r\n        }\r\n\r\n        if (seconds === 60) {\r\n            seconds = 0\r\n            minutes = minutes + 1\r\n        }\r\n\r\n        if (minutes === 60) {\r\n            minutes = 0\r\n            hours = hours + 1\r\n        }\r\n\r\n        updateTimer(hours, minutes, seconds, miliseconds)\r\n    }\r\n\r\n    //Función que se llama con el boton stop\r\n    const handleStopClick = () => {\r\n        if (running) {\r\n            setRunning(false)\r\n        }\r\n    }\r\n\r\n    //Función que se llama con el boton timestamp\r\n    const handleTimestamp = () => {\r\n        const timestamp = { \r\n            hours: clock.hours, \r\n            minutes: clock.minutes, \r\n            seconds: clock.seconds, \r\n            miliseconds: clock.miliseconds \r\n        }\r\n\r\n        setAllTimestamps([...allTimestamps, timestamp ])\r\n\r\n    }\r\n\r\n    //Función que se llama con el boton reset\r\n    const handleReset = () => {\r\n        updateTimer(0, 0, 0, 0)\r\n        setAllTimestamps([])\r\n        setStarted(false)\r\n    }\r\n\r\n    //Función de actualización del estado\r\n    const updateTimer = (hours, minutes, seconds, miliseconds) => {\r\n        setClock({ hours, minutes, seconds, miliseconds })\r\n    }\r\n\r\n    const addZero = (value) => (value < 10 ? `0${value}` : value)\r\n\r\n    \r\n    let { hours, minutes, seconds, miliseconds } = clock\r\n    hours = addZero(hours)\r\n    minutes = addZero(minutes)\r\n    seconds = addZero(seconds)\r\n    miliseconds = addZero(miliseconds)\r\n    \r\n    return (\r\n        <>\r\n            <h3>{`${hours} : ${minutes} : ${seconds} : ${miliseconds}`}</h3>\r\n            <Button disabled={running} onClick={handleStartClick}> START </Button>\r\n            <Button disabled={!running} onClick={handleStopClick}> STOP </Button>\r\n            <Button disabled={!running} onClick={handleTimestamp}> TIMESTAMP </Button>\r\n            {started && <Button disabled={running} onClick={handleReset}> RESET </Button>}\r\n\r\n            <List>\r\n                {allTimestamps.map((timestamp, idx) => (\r\n                    <li key={id()}>\r\n                        {`\r\n                            ${idx + 1} -\r\n                            ${addZero(timestamp.hours)} :\r\n                            ${addZero(timestamp.minutes)} :\r\n                            ${addZero(timestamp.seconds)} :\r\n                            ${addZero(timestamp.miliseconds)}\r\n                        `}\r\n                    </li>\r\n                ))}\r\n\r\n            </List>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Chronometer;","import React, { Component } from 'react'\n\nimport Chronometer from './components/ChronometerHook'\n\nimport { createGlobalStyle } from 'styled-components'\n\nconst GlobalStyle = createGlobalStyle`\n    body{\n        background-color:#222;\n        color:#387EF5;\n        text-align:center;\n    }\n`\n\nclass App extends Component {\n\n    render() {\n        return (\n            <>\n                <GlobalStyle />\n                <h1>Chronometer</h1>\n                <Chronometer />\n            </>\n        )\n    }\n}\n\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App'\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}